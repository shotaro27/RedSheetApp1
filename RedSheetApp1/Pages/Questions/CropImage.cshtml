@page
@model RedSheetApp1.Pages.Questions.CropImageModel

@{
	ViewData["Title"] = "画像から抽出する";
}

<h4>画像から抽出する</h4>
<hr />
<div class="row">
	<div class="col-12">
		<form method="post">
			<div class="form-group">
				<input type="file" accept='image/*' onchange="OnFileSelect(this);" multiple>
				<button type="button" class="btn btn-primary" id="cropbutton" disabled data-target="#modal" data-toggle="modal">
					画像を切り取る
				</button>
				<input type="hidden" id="croppedimage" name="imgurl" value="" />
				<div id="image-area"></div>
				<div id="cropped-image-area"></div>
				<div id="selected-image"></div>
				<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
					<div class="modal-dialog" role="document">
						<div class="modal-content">
							<div class="modal-header">
								<h5 class="modal-title" id="modalLabel">画像を切り取る</h5>
								<button type="button" class="close" data-dismiss="modal" aria-label="Close">
									<span aria-hidden="true">&times;</span>
								</button>
							</div>
							<div class="modal-body">
								<div class="img-container">
									<img id="image" alt="Picture">
								</div>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-primary" id="cropimage" data-dismiss="modal">切り抜く</button>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="form-group">
				<button type="submit" id="send" disabled name="send" value="extract" class="btn btn-primary">抽出</button>
			</div>
			<div class="form-group">
				<button type="submit" name="send" value="back" class="btn btn-link">戻る</button>
			</div>
		</form>
	</div>
</div>

<script>
	const options = {
		maxSizeMB: 1,
		maxWidthOrHeight: 1920
	};

	let selected = 0;

	function OnFileSelect(obj) {
		$('#image-area').html("");
		$('#cropped-image-area').html("");
		let index = 0;
		for (let file of obj.files) {
			imageCompression(file, options)
				.then(function (compressedFile) {
					let fileReader = new FileReader();
					fileReader.onload = (function () {
						console.log("load");
						let newImage = new Image();
						newImage.classList.add("crop-image");
						newImage.src = fileReader.result;
						newImage.id = `img${index}`;
						newImage.alt = index;
						let newCroppedImage = new Image();
						newCroppedImage.classList.add("cropped-image", "d-none");
						newCroppedImage.src = fileReader.result;
						newCroppedImage.id = `croppedimg${index}`;
						newCroppedImage.alt = index;
						newImage.draggable = true;
						newImage.ondragstart = () => {
							event.dataTransfer.setData("text/plain", event.target.id);
						};
						newImage.ondragover = () => { event.preventDefault(); };
						newImage.ondrop = (obj) => {
							event.preventDefault();
							const target = obj.target;
							var id = event.dataTransfer.getData("text/plain");
							var base = document.getElementById(id);
							var baseCropped = document.getElementById("cropped" + id);
							var targetCropped = document.getElementById("cropped" + target.id);
							var buff = target.src;
							target.src = base.src;
							base.src = buff;
							buff = targetCropped.src;
							targetCropped.src = baseCropped.src;
							baseCropped.src = buff;
						}
						newImage.onclick = () => {
							$('#image').attr("src", newCroppedImage.src);
							selected = newImage.alt;
							console.log();
							var modal = new bootstrap.Modal(document.getElementById('modal'));
							modal.show();
						};
						$('#image-area').append(newImage);
						$('#cropped-image-area').append(newCroppedImage);
						index++;
					});
					fileReader.readAsDataURL(compressedFile);
				})
				.catch(function (error) {
					console.log(error.message);
				});
		}
	}

	function previewImage(obj) {
		imageCompression(obj.files[0], options)
			.then(function (compressedFile) {
				var fileReader = new FileReader();
				fileReader.onload = (function () {
					$('#image').attr("src", fileReader.result);
				});
				fileReader.readAsDataURL(compressedFile);
				$("#cropbutton").prop("disabled", false);
			})
			.catch(function (error) {
				console.log(error.message);
			});
	}

	$(() => {
		var image = document.getElementById('image');
		var cropBoxData;
		var canvasData;
		var cropper;
		let croppable = false;

		$('#modal').on('shown.bs.modal', function () {
			cropper = new Cropper(image, {
				autoCropArea: 0.5,
				zoomable: false,
				ready: function () {
					cropper.setCropBoxData(cropBoxData).setCanvasData(canvasData);
					croppable = true;
				}
			});
		}).on('hidden.bs.modal', function () {
			cropBoxData = cropper.getCropBoxData();
			canvasData = cropper.getCanvasData();
			cropper.destroy();
		});

		$("#cropimage").click(() => {
			var croppedCanvas;

			if (!croppable) {
				return;
			}

			croppedCanvas = cropper.getCroppedCanvas();

			$(`#img${selected}`).attr("src", croppedCanvas.toDataURL());

			let val = $('.crop-image').map(function () {
				return $(this).attr("src");
			}).get().join("|");

			$("#croppedimage").attr("value", val);
			$("#send").prop("disabled", false);
		});
	});
</script>

@section Scripts {
	
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
